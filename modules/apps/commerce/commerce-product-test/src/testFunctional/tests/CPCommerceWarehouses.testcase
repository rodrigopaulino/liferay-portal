@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Commerce";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			CommerceConfiguration.commerceAdminTearDown();

			CommerceConfiguration.commerceInitializersTearDown();
		}
	}

	@description = "This is a test for COMMERCE-6207. UI inventory items lifecycle"
	@ignore = "true"
	@priority = "3"
	test AddEditAndRemoveItemToWarehouse {
		property portal.acceptance = "false";

		// TODO COMMERCE-6207 AddItemToWarehouse Pending Implementation

	}

	@description = "This is a test for COMMERCE-6206. Add income items"
	@ignore = "true"
	@priority = "3"
	test AddIncomeItems {
		property portal.acceptance = "false";

		// TODO COMMERCE-6206 AddIncomeItems Pending Implementation
	}

	@description = "This is a test for COMMERCE-6200. Consume booked quantities of one item in multiple warehouses"
	@ignore = "true"
	@priority = "3"
	test ConsumeBookedQuantitiesFromMultipleWarehouses {
		property portal.acceptance = "false";

		// TODO COMMERCE-6200 ConsumeBookedQuantitiesFromMultipleWarehouses Pending Implementation
	}

	@description = "This is a test for COMMERCE-6201. Consume quantities of one item in multiple warehouses"
	@ignore = "true"
	@priority = "3"
	test ConsumeQuantitiesFromMultipleWarehouses {
		property portal.acceptance = "false";

		// TODO COMMERCE-6201 ConsumeQuantitiesFromMultipleWarehouses Pending Implementation
	}

	@description = "This is a test for COMMERCE-5706. As a system admin i want to be able to create / update and delete a new warehouse"
	@priority = "3"
	test CreateAndUpdateNewWarehouse {
		property portal.acceptance = "false";

		// TODO Review

		var fieldDescription= "Test Warehouse Description";
		var fieldLatitudeNumber = "12345";
		var fieldLongitudeNumber = "12345";
		var fieldName = "Test Warehouse";
		var fieldCity = "Test City";
		var fieldPostalCode = "12345";
		var fieldStreet1 = "Test Address";
		var fieldStreet2 = "Test Street";
		var fieldStreet3 = "";
		var selectorCountry = "United States";
		var selectorRegion = "California";
		var fieldLatitudeNumber = "12345.0";
		var fieldLongitudeNumber = "12345.0";

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Warehouses");

		Click(locator1 = "AnalyticsCloudConnection#ADD_NEW_PROPERTY_BUTTON");

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldName}");

		Type(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldDescription}");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		if (!(IsElementPresent(
					key_specifiedCollapse = "Geolocation",
					locator1="CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN"))) {
			Click(
				key_contentType = "Geolocation",
				locator1 = "Notifications#NOTIFICATION_DELIVERY_PANEL");

			WaitForElementPresent(
				key_specifiedCollapse = "Geolocation",
				locator1 = "CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN");
		}

		Type(
			key_fieldLabel = "Latitude",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldLatitudeNumber}");

		Type(
			key_fieldLabel = "Longitude",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldLongitudeNumber}");

		Button.clickSave();

		CommerceNavigator.gotoEntry(entryName = "Test Warehouse");

		if (!(IsElementPresent(
					key_specifiedCollapse = "Address",
					locator1="CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN"))) {
			Click(
				key_contentType = "Address",
				locator1 = "Notifications#NOTIFICATION_DELIVERY_PANEL");

			WaitForElementPresent(
				key_specifiedCollapse = "Address",
				locator1 = "CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN");
		}

		Type(
			key_fieldLabel = "Street 1",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldStreet1}");

		Type(
			key_fieldLabel = "Street 2",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldStreet2}");

		Type(
			key_fieldLabel = "Street 3",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldStreet3}");

		Select(
			key_fieldLabel = "Country",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "${selectorCountry}");

		Select(
			key_fieldLabel = "Region",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "${selectorRegion}");

		Type(
			key_fieldLabel = "Postal Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldPostalCode}");

		Type(
			key_fieldLabel = "City",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldCity}");

		Button.clickSave();

		CommerceNavigator.gotoEntry(entryName = "Test Warehouse");

		AssertTextEquals(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldName}");

		AssertTextEquals(
			key_fieldLabel = "Description",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldDescription}");

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		if (!(IsElementPresent(
					key_specifiedCollapse = "Address",
					locator1="CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN"))) {
			Click(
				key_contentType = "Address",
				locator1 = "Notifications#NOTIFICATION_DELIVERY_PANEL");

			WaitForElementPresent(
				key_specifiedCollapse = "Address",
				locator1 = "CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN");
		}

		AssertTextEquals(
			key_fieldLabel = "Street 1",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldStreet1}");

		AssertTextEquals(
			key_fieldLabel = "Street 2",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldStreet2}");

		AssertTextEquals(
			key_fieldLabel = "Street 3",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldStreet3}");

		AssertSelectedLabel(
			key_fieldLabel = "Country",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "${selectorCountry}");

		AssertSelectedLabel(
			key_fieldLabel = "Region",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "${selectorRegion}");

		AssertTextEquals(
			key_fieldLabel = "Postal Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldPostalCode}");

		AssertTextEquals(
			key_fieldLabel = "City",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldCity}");

		AssertTextEquals(
			key_fieldLabel = "Latitude",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldLatitudeNumber}");

		AssertTextEquals(
			key_fieldLabel = "Longitude",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldLongitudeNumber}");

		Button.clickSave();

		Click(
			key_text = "Test Warehouse",
			locator1 = "Icon#ANY_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");
	}

	@description = "This is a test for COMMERCE-5707. As a product specialist i want to be able to deactivate a warehouse"
	@ignore = "true"
	@priority = "3"
	test DeactivateWarehouse {
		property portal.acceptance = "false";

		// TODO COMMERCE-5707 DeactivateWarehouse Pending Implementation
	}

	@description = "This is a test for COMMERCE-6199. Get available quantities of one item in multiple warehouses"
	@ignore = "true"
	@priority = "3"
	test GetAvailableQuantityFromMultipleWarehouses {
		property portal.acceptance = "false";

		// TODO COMMERCE-6199 GetAvailableQuantityFromMultipleWarehouses Pending Implementation
	}

	@description = "This is a test for COMMERCE-6204. Get stock quantity of a SKU for specific channel"
	@ignore = "true"
	@priority = "3"
	test GetChannelSKUStockQuantity {
		property portal.acceptance = "false";

		// TODO COMMERCE-6204 GetChannelSKUStockQuantity Pending Implementation
	}

	@description = "This is a test for COMMERCE-6203. Get stock quantity of a SKU"
	@priority = "3"
	test GetSKUStockQuantity {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "ABS Sensor");

		Click(
			key_entryName = "ABS Sensor",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(
			key_entryName = "MIN93015",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		CommerceEntry.gotoMenuTab(menuTab = "Inventory");

		var count1 = "0";
		var amount = "0";

		while (IsElementPresent(key_value1 = "${count1}", locator1 = "CommerceEntry#WAREHOUSE_INVENTORY_ITEM_QUANTITY")) {
			var temp1 = selenium.getAttribute("//input[contains(@id,'_com_liferay_commerce_product_definitions_web_internal_portlet_CPDefinitionsPortlet_commerceInventoryWarehouseItemQuantity${count1}')]@value");
			var amount = MathUtil.sum("${temp1}", "${amount}");
			var count1 = MathUtil.sum("${count1}", "1");
		}

		Refresh();

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Inventory");

		AppBuilderAdmin.searchByItem(itemName = "MIN93015");

		AssertTextEquals(
			locator1 = "CommerceEntry#INVENTORY_BY_WAREHOUSE_AVAILABLE_LABEL",
			value1 = "${amount}");
	}

	@description = "This is a test for COMMERCE-6205. Get warehouse names given a SKU"
	@priority = "3"
	test GetWarehouseNameGivenChannel {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Warehouses");

		Click(locator1 = "Button#PLUS");

		Type(
			key_fieldLabel = "Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "TestWH");

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Master");

		AssertClickNoError(
			locator1 = "Button#SUBMIT",
			value1 = "Submit");

		Refresh();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Product Test",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "MIN00000");

		Button.clickPublish();

		CommerceEntry.gotoMenuTab(menuTab = "Inventory");

		Type(
			key_value1 = "0",
			locator1 = "CommerceEntry#WAREHOUSE_INVENTORY_ITEM_QUANTITY",
			value1 = "45");

		Click(
			key_value1 = "0",
			locator1 = "CommerceEntry#WAREHOUSE_INVENTORY_SAVE_BUTTON");

		Refresh();

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Inventory");

		Click(
			key_entryName = "MIN00000",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		AssertTextEquals(
			locator1 = "CommerceEntry#INVENTORY_BY_WAREHOUSE_NAME",
			value1 = "TestWH");
	}

	@description = "This is a test for COMMERCE-6202. It should be possible to limit the warehouse stock quantity by channel"
	@priority = "3"
	test LimitWarehouseStockQuantityByChannel {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CPCommerceWarehouses#LimitWarehouseStockQuantityByChannel";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Warehouses");

		Click(
			key_itemName = "Italy",
			locator1 = "AppBuilder#ITEM_ON_THE_TABLE_CLICK");

		if (!(IsElementPresent( specifiedCollapse = "Channels",
					locator1 = "CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN"))) {
			Click(
				key_contentType = "Channels",
				locator1 = "Notifications#NOTIFICATION_DELIVERY_PANEL");

			Pause(locator1 = "1000");
		}

		Button.clickSave();

		Click(
			key_itemName = "Italy",
			locator1 = "AppBuilder#ITEM_ON_THE_TABLE_CLICK");

		AssertChecked(
			checkboxName = "Minium Portal",
			locator1 = "Checkbox#ANY_CHECKBOX_CHECKED");
	}

	@description = "This is a test for COMMERCE-6208. Concurrency management for inventory entities"
	@ignore = "true"
	@priority = "3"
	test ManageInventoryEntityConcurrency {
		property portal.acceptance = "false";

		// TODO COMMERCE-6208 ManageInventoryEntityConcurrency Pending Implementation
	}

	@description = "This is a test for COMMERCE-5708. As a product specialist i want to update the quantity of a product inside a warehouse"
	@priority = "3"
	test UpdateInventorySKUQuantity {
		property portal.acceptance = "false";

		// TODO Review

		var key_inventoryName = "test new warehouse";

		ApplicationsMenu.gotoPortlet(
			category = "Inventory Management",
			panel = "Commerce",
			portlet = "Warehouses");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewAccountGroupsEntry(entryName = "test new warehouse");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Active",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(locator1 = "CommerceEntry#WAREHOUSE_GEOLOCATION");

		Type(
			key_fieldLabel = "Latitude",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "50");

		Type(
			key_fieldLabel = "Longitude",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "50");

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			panel = "Commerce",
			portlet = "Catalogs");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewCatalogsEntry(
			catalogCurrency = "US Dollar",
			catalogLanguage = "English (United States)",
			catalogName = "Master");

		Button.click(button = "Submit");

		ApplicationsMenu.gotoPortlet(
			category = "Product Management",
			panel = "Commerce",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Button.clickPublish();

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceNavigator.gotoEntry(entryName = "default");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		CommerceEntry.gotoMenuTab(menuTab = "Inventory");

		Type(
			locator1 = "CommerceEntry#INVENTORY_INPUT",
			value1 = "50");

		Button.clickSave();

		Click(locator1 = "Icon#CLOSE");

		SelectFrame.selectFrameTop();

		ApplicationsMenu.gotoPortlet(
			category = "Inventory Management",
			panel = "Commerce",
			portlet = "Inventory");

		Search.searchCP(searchTerm = "default");

		AssertVisible(
			key_productQuantity = "50",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_QUANTITY");
	}

}