@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content &amp; Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			Page.tearDownCP();
		}
	}

	@description = "Verify that a Text Field can be Autocompleted from a list of options"
	@ignore = "Test Stub"
	@priority = "4"
	test CanBeAutocompletedUsingAList {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131349 CanBeAutocompletedUsingAList pending implementation

	}

	@description = "Verify that a Text Field can be created"
	@priority = "5"
	test CanBeCreated {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormFields.viewTextLabel(
			fieldLabel = "Text",
			fieldName = "Text");
	}

	@description = "Verify that a Text Field can be deleted"
	@ignore = "Test Stub"
	@priority = "5"
	test CanBeDeleted {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131332 CanBeDeleted pending implementation
	}

	@description = "Verify that a Text Field can be duplicated"
	@ignore = "Test Stub"
	@priority = "5"
	test CanBeDuplicated {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131333 CanBeDuplicated pending implementation
	}

	@description = "Verify that the "Contains" option can be used to validate a Text Field"
	@priority = "4"
	test CanBeValidatedUsingTheContainsOption {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Form.gotoAdvancedTab();

		FormViewBuilder.checkSwitcher(propertyName = "Validation");

		FormFields.selectSelectOption(
			fieldName = "If Input",
			selectOption = "Contains");

		FormFields.editText(
			fieldName = "parameter",
			fieldValue = "Test");

		FormFields.editText(
			fieldName = "errorMessage",
			fieldValue = "Test Error");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "Test Error");

		FormPortlet.submit();

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Text");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		FormPortlet.submit();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that the "Does Not Match" option can be used to validate a Text Field"
	@ignore = "Test Stub"
	@priority = "4"
	test CanBeValidatedUsingTheDoesNotMatchOption {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131348 CanBeValidatedUsingTheDoesNotMatchOption pending implementation
	}

	@description = "Verify that the "Is Not Email" option can be used to validate a Text Field"
	@priority = "4"
	test CanBeValidatedUsingTheIsNotEmailOption {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Navigator.gotoNavTab(navTab = "Advanced");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Validation",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		FormFields.selectSelectOption(
			fieldName = "If Input",
			selectOption = "Is not email");

		FormFields.viewTextFieldNotPresent(fieldLabel = "The Value");

		FormFields.editText(
			fieldName = "errorMessage",
			fieldValue = "Test Error");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Test");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "test@liferay.com");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		Button.clickSubmitButton();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that the "Is Not URL" option can be used to validate a Text Field"
	@priority = "4"
	test CanBeValidatedUsingTheIsNotURLOption {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.gotoAdvancedTab();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Validation",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		FormFields.selectSelectOption(
			fieldName = "If Input",
			selectOption = "Is not URL");

		FormFields.viewTextFieldNotPresent(
			key_fieldLabel = "The Value",
			key_fieldName = "The Value");

		FormFields.editText(
			fieldName = "errorMessage",
			fieldValue = "Test Error");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Text");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "https://www.liferay.com/");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		Button.clickSubmitButton();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that changes to a Field can be canceled"
	@ignore = "Test Stub"
	@priority = "5"
	test ChangesCanBeCanceled {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131335 ChangesCanBeCanceled pending implementation
	}

	@description = "Verify that a Help Text can be added to a Text Field"
	@ignore = "Test Stub"
	@priority = "5"
	test HelpTextCanBeAdded {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131338 HelpTextCanBeAdded pending implementation
	}

	@description = "Verify that the Field Label can be edited"
	@ignore = "Test Stub"
	@priority = "5"
	test LabelCanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131336 LabelCanBeEdited pending implementation
	}

	@description = "Veriy that the Field Label can be hidden"
	@ignore = "Test Stub"
	@priority = "5"
	test LabelCanBeHidden {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131337 LabelCanBeHidden pending implementation
	}

	@description = "Verify that Placeholder Text can be set"
	@priority = "5"
	test PlaceholderTextCanBeAdded {
		property forms.functional = "true";
		property portal.acceptance = "false";

		ProductMenu.gotoPortlet(
			category = "Content &amp; Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		FormViewBuilder.setPlaceholder(fieldValue = "Test Text");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		Form.viewFormPlaceholderText(fieldPlaceholderText = "Test Text");
	}

	@description = "Verify that a Predefined Value can be set"
	@ignore = "Test Stub"
	@priority = "5"
	test PredefinedValueCanBeAdded {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131341 PredefinedValueCanBeAdded pending implementation
	}

	@description = "Verify that the Field Reference can be Edited"
	@ignore = "Test Stub"
	@priority = "5"
	test ReferenceCanBeEdited {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131339 ReferenceCanBeEdited pending implementation
	}

	@description = "Verify that the Field Type can be changed"
	@ignore = "Test Stub"
	@priority = "5"
	test TypeCanBeChanged {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131334 TypeCanBeChanged pending implementation
	}

	@description = "Verify that Validation options are reset after changing the Field Type from Text Field to Numeric Field"
	@ignore = "Test Stub"
	@priority = "4"
	test ValidationIsResetAfterChangingFieldType {
		property forms.functional = "true";
		property portal.acceptance = "false";

		// TODO LPS-131352 ValidationIsResetAfterChangingFieldType pending implementation
	}

}